duas otimizações importantes
suporte a uma operação nova


1. Sincronização fina dos inodes

Permitir p.ex:
a criação de novo ficheiro numa dada diretoria e a pesquisa 
de outro ficheiro numa diretoria diferente

remover 4º argumento

-------------------------------(1)----------------------------
trincos finos, 
um por cada i-node na tabela de inodes do TecnicoFS
(rwlock provavelmente)

à medida que uma dada operação (create) precisa
aceder a mais um i-node, o trinco respetivo deve ser obtido.
no final da operação, esta terá obtido um conjunto de trincos
esse conjunto de trincos deverá ser libertado apenas no final da
execução da operação

quando uma operacao está a ser executada nenhuma diretoria do
path pode ser alterada por outras operacoes concorrentes.

quando uma operacao esta a alterar o estado de uma diretoria
nenhuma outra operacao pode observar os efeitos(incompletos)

Ex:
(concorrente)
c /a/b/c f 
c /a/d/f f 
querem alterar diferentes diretorias

(nao concorrente)
l /
c /a d 
a primeira quer ler enquanto a segunda quer alterar

-------------------------------(2)----------------------------

substituir carregamento/execução em duas fases sequenciais

pretende-se que, a partir do momento em que a tarefa inicial 
carrega um comando e o coloca no vetor, uma tarefa escrava 
que esteja livre possa imediatamente retirar e executar esse
comando. 

Caso uma tarefa escrava esteja livre e o vetor de comandos 
não tenha nenhum comando, esta deve aguardar até que surja
novo comando no vetor ou até que o final do ficheiro de 
entrada seja alcançado.

(Estranho)
Ao contrário do 1º exercício, o carregamento não deve ser terminado quando o vetor de comandos
se encontrar totalmente preenchido. Na nova solução, sempre que a situação anterior se verifique, a
tarefa que preenche o vetor deve esperar até que novas posições no mesmo sejam libertadas pela
execução dos comandos respectivos (por parte das tarefas escravas). Para exercitar esse novo
comportamento, a dimensão do vetor de comandos deve passar a ser 10 entradas.
(Weird)

O tempo de execução deve passar a ser medido desde
o momento em que o carregamento do ficheiro de entrada começa.

-------------------------------(3)----------------------------
Nova operação: mover ficheiro ou diretoria

mesma semântica da operação mv em Linux
o recebe dois argumentos: o pathname atual de um 
ficheiro/diretoria e o novo pathname.




-------------------------------(4)----------------------------
Shell script



Alterado:
alterado verificacoes de num argumentos (5->4)
alterado verificacao do tipo de syncstrat(argv[4])
removed lock e unlock da funcao apply
add pthread_rwlock_t rwl; à estrutura inode
removed initlock()
add rwlock_init in inode_table_init
removed destroylocks()
add rwlock_destroy in inode_table_destroy
removed command locks
removed destroylocks


criar um lookup




DUVIDAS-------------------------

/*     c a/b/c/e  f */
/*     c a/b/c/d  f */

a primeira operacao da lock ate ao fim.
a segunda operacao vai estar a dar lock ate ao c e fica a espera ( correto ? )
quando a primeira operacao der unlock aos seus inode anteriores estará tambem da dar unlock aos inodes da segunda thread que ja foram locked ?

c a/b/c/e
(a,b,c,e) locked

c a/b/c/d
(a,b) locked
(c) waiting        ou fica à espera no a ?

c a/b/c/e
(a,b,c,e) unlocked

c a/b/c/d
(a,b) locked -------> passa para unlocked ?
(c,d) locked


ALSO

como conseguir dar lock ao proximo inode (na funcao create)
ou seja damos lock até à diretoria em que o ficheiro vai ser criado mas depois como é que sabemos o inode do ficheiro antes deste ser criado ?