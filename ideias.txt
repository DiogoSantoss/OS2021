

Queremos sockets do tipo datagram
comunicacao tipo correio
sem ligacao
bidirecional
nao fiavel
interface por mensagem

struct sockaddr_un {
    u_short family;     //dominio
    char sun_path[108]; //nome
}

                                        
Servidor: socket -> bind -> recvfrom -> sendto      
                              ^           | 
                              |           v
Cliente: socket -> bind -> sendto -> recvfrom 

o recvfrom do servidor recebe a mensagem do cliente e passa a saber o nome do socket do cliente

(nome do socket do servidor tem de ser conhecido por todos, nao deve ser alterado constantemente)

#include <sys/types.h>
#include <sys/socket.h>
int socket (int dominio,int tipo,int protocolo)
dominio: AF_UNIX
tipo: SOCK_DGRAM
protocolo: escolhido por omissao
return: identificador do socket (sockfd)

um socket é criado sem nome
associar um nome:
int bind(int sockfd,struct sockaddr *nome,int dim)

int sendto(int sockfd,char *mens,int dmens,int flag,struct sockaddr *dest,int *dim)
flag: 0
return: numero de caracteres enviados, se return != dmens houve um erro

int recvto(int sockfd,char *mens,int dmens,int flag,struct sockaddr *orig,int *dim)


-------------------------------------------    CLIENTE    -------------------------------

#include "unix.h"
main(void) {
    int sockfd, clilen, servlen;
    char *mktemp();
    struct sockaddr_un cli_addr, serv_addr;

    /* Cria socket datagram */
    if(( sockfd = socket(AF_UNIX, SOCK_DGRAM, 0) ) < 0)
        err_dump("client: can't open datagram socket");

    /* O nome temporário serve para ter um socket para resposta do servidor */
    bzero((char *) &cli_addr, sizeof(cli_addr));                        //limpa o struct
    cli_addr.sun_family = AF_UNIX;                                       //preenche o struct
    mktemp(cli_addr.sun_path);                                          //mktemp preenche com um percurso aleatorio garante que os varios clientes tem diferentes percursos.
    clilen = sizeof(cli_addr.sun_family) + strlen(cli_addr.sun_path);   //calcula tamanho                //os endereços dos clientes nao podem ser os mesmos

    /* Associa o socket ao nome temporário */
    if (bind(sockfd, (struct sockaddr *) &cli_addr, clilen) < 0)
        err_dump("client: can't bind local address");

    /* Primeiro uma limpeza preventiva!
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sun_family = AF_UNIX;
    strcpy(serv_addr.sun_path, UNIXDG_PATH);
    servlen=sizeof(serv_addr.sun_family) + strlen(serv_addr.sun_path);

    /* Lê linha do stdin e envia para o servidor. Recebe a linha do servido e envia-a para stdout */
    dg_cli(stdin, sockfd, (struct sockaddr *) &serv_addr, servlen);

    close(sockfd);
    unlink(cli_addr.sun_path);
    exit(0);
}

    FUNCAO DG_CLI

#include <stdio.h>
#define MAXLINE 512
    /* Cliente do tipo socket datagram.
    Lê string de fp e envia para sockfd.
    Lê string de sockfd e envia para stdout */

    #include <sys/types.h>
    #include <sys/socket.h>

    dg_cli(fp, sockfd, pserv_addr, servlen)
    FILE *fp;
    int sockfd;
    struct sockaddr *pserv_addr;
    int servlen;
    {
        int n;
        static char sendline[MAXLINE], recvline[MAXLINE+1];
        struct sockaddr x;
        int xx = servlen;

    // neste ciclo o cliente envia uma mensagem para o servidor e recebe a mesma mensagem do servidor e faz print dela

    while (fgets(sendline, MAXLINE, fp) != NULL) {
        n = strlen(sendline);

        /* Envia string para sockfd. Note-se que o \0 não é enviado */
        if (sendto(sockfd, sendline, n, 0, pserv_addr, servlen) != n)   //nao enviamos o \0
            err_dump("dg_cli: sendto error on socket");

        /* Tenta ler string de sockfd. Note-se que tem de terminar a string com \0 */
        n = recvfrom(sockfd, recvline, MAXLINE, 0, (struct sockaddr *) 0, (int *) 0);  //orig é zero porque ele nao quer saber quem enviou
        if (n < 0)
            err_dump("dg_cli: recvfrom error");
        recvline[n] = 0;  //adiciona o terminador de string

        /* Envia a string para stdout */
        fputs(recvline, stdout);
    }
    if (ferror(fp)) err_dump("dg_cli: error reading file");
}

 
 
----------------------------------------    SERVIDOR        -----------------------------------------------------------------

/* Servidor do tipo socket datagram. Recebe linhas do cliente e devolve-as para o cliente */
#include "unix.h"
main (void) {
    int sockfd, servlen;
    struct sockaddr_un serv_addr, cli_addr;

    /* Cria socket datagram */
    if ((sockfd = socket(AF_UNIX, SOCK_DGRAM, 0)) < 0)
        err_dump("server: can't open datagram socket");

    unlink(UNIXDG_PATH);
    /* Limpeza preventiva*/
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sun_family = AF_UNIX;
    strcpy(serv_addr.sun_path, UNIXDG_PATH);                  // o nome ja nao é aleatorio como foi para o cliente
    servlen = sizeof(serv_addr.sun_family) + strlen(serv_addr.sun_path);

    /* Associa o socket ao nome */
    if (bind(sockfd, (struct sockaddr *) &serv_addr, servlen) < 0)
        err_dump("server: can't bind local address");
        
    /* Fica à espera de mensagens do client e reenvia-as para o cliente */
    dg_echo(sockfd, (struct sockaddr *) &cli_addr, sizeof(cli_addr));
}


#define MAXLINE 512
/* Servidor do tipo socket datagram. Manda linhas recebidas de volta para o cliente */
#include <sys/types.h>
#include <sys/socket.h>
#define MAXMESG 2048

/* pcli_addr especifica o cliente */

dg_echo(sockfd, pcli_addr, maxclilen)
int sockfd;
struct sockaddr *pcli_addr;
int maxclilen;
{
    int n, clilen;
    char mesg[MAXMESG];
    for (;;) {
        clilen = maxclilen;
        /* Lê uma linha do socket */
        n = recvfrom(sockfd, mesg, MAXMESG,0, pcli_addr, &clilen);  //buffer "mesg" com capacidade "MAXMESG" 
                                                                    //guarda quem enviou em "pcli_addr"
        if (n < 0)
            err_dump("dg_echo:recvfrom error");

        /*Manda linha de volta para o socket */
        if (sendto(sockfd, mesg, n, 0,pcli_addr, clilen) != n)
            err_dump("dg_echo: sendto error");
    }
}